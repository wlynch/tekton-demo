apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: buildpacks-v3
spec:
  inputs:
    params:
    - name: BUILDER_IMAGE
      description: The image on which builds will run (must include v3 lifecycle and compatible buildpacks).
    - name: USE_CRED_HELPERS
      description: Use Docker credential helpers for Google's GCR, Amazon's ECR, or Microsoft's ACR.
      default: 'false'
    - name: CACHE
      description: The name of the persistent app cache volume
      default: empty-dir
    - name: USER_ID
      description: The user ID of the builder image user
      default: "1000"
    - name: GROUP_ID
      description: The group ID of the builder image user
      default: "1000"

    resources:
    - name: source
      type: git

  outputs:
    resources:
    - name: image
      type: image

  steps:
  - name: prepare
    image: alpine
    imagePullPolicy: Always
    command: ["/bin/sh"]
    args:
    - "-c"
    - >
      chown -R "$(inputs.params.USER_ID):$(inputs.params.GROUP_ID)" "/builder/home" &&
      chown -R "$(inputs.params.USER_ID):$(inputs.params.GROUP_ID)" "/layers" &&
      chown -R "$(inputs.params.USER_ID):$(inputs.params.GROUP_ID)" "/cache" &&
      chown -R "$(inputs.params.USER_ID):$(inputs.params.GROUP_ID)" "/workspace/source"
    volumeMounts:
    - name: "layers-dir"
      mountPath: /layers
    - name: "$(inputs.params.CACHE)"
      mountPath: /cache

  - name: detect
    image: $(inputs.params.BUILDER_IMAGE)
    imagePullPolicy: Always
    command: ["/lifecycle/detector"]
    args:
    - "-app=/workspace/source/buildpack"
    - "-group=/layers/group.toml"
    - "-plan=/layers/plan.toml"
    volumeMounts:
    - name: "layers-dir"
      mountPath: /layers

  - name: restore
    image: $(inputs.params.BUILDER_IMAGE)
    imagePullPolicy: Always
    command: ["/lifecycle/restorer"]
    args:
    - "-group=/layers/group.toml"
    - "-layers=/layers"
    - "-cache-dir=/cache"
    volumeMounts:
    - name: "$(inputs.params.CACHE)"
      mountPath: /cache
    - name: "layers-dir"
      mountPath: /layers

  - name: analyze
    image: $(inputs.params.BUILDER_IMAGE)
    imagePullPolicy: Always
    command: ["/lifecycle/analyzer"]
    args:
    - "-layers=/layers"
    - "-helpers=$(inputs.params.USE_CRED_HELPERS)"
    - "-group=/layers/group.toml"
    - "$(outputs.resources.image.url)"
    env: 
      - name : "DOCKER_CONFIG"
        value: "/tekton/home/.docker/"
    volumeMounts:
    - name: "layers-dir"
      mountPath: /layers

  - name: build
    image: $(inputs.params.BUILDER_IMAGE)
    imagePullPolicy: Always
    command: ["/lifecycle/builder"]
    args:
    - "-app=/workspace/source/buildpack"
    - "-layers=/layers"
    - "-group=/layers/group.toml"
    - "-plan=/layers/plan.toml"
    volumeMounts:
    - name: "layers-dir"
      mountPath: /layers

  - name: export
    image: $(inputs.params.BUILDER_IMAGE)
    imagePullPolicy: Always
    command: ["/lifecycle/exporter"]
    args:
    - "-app=/workspace/source/buildpack"
    - "-layers=/layers"
    - "-helpers=$(inputs.params.USE_CRED_HELPERS)"
    - "-group=/layers/group.toml"
    - "-cache-dir=/cache"
    - "$(outputs.resources.image.url)"
    env:
      - name: "DOCKER_CONFIG"
        value: "/tekton/home/.docker/"
    volumeMounts:
    - name: "layers-dir"
      mountPath: /layers
    - name: "$(inputs.params.CACHE)"
      mountPath: /cache


  volumes:
  - name: empty-dir
    emptyDir: {}
  - name: layers-dir
    emptyDir: {}
